import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { Script } from '@prisma/client';

export interface CreateScriptDto {
    name: string;
    description: string;
    active: boolean;
    triggers: string[];
    response: string;
    category?: string;
    requiresDate?: boolean;
    requiresRoomType?: boolean;
    requiresOccupancy?: boolean;
}

export interface UpdateScriptDto extends Partial<CreateScriptDto> {}

@Injectable()
export class ScriptsService {
    private readonly logger = new Logger(ScriptsService.name);

    constructor(private prisma: PrismaService) {}

    async findAll(): Promise<Script[]> {
        try {
            return await this.prisma.script.findMany({
                orderBy: {
                    createdAt: 'desc'
                }
            });
        } catch (error) {
            this.logger.error('Error al obtener scripts:', error);
            throw error;
        }
    }

    async findById(id: number): Promise<Script> {
        try {
            const script = await this.prisma.script.findUnique({
                where: { id }
            });

            if (!script) {
                throw new NotFoundException(`Script con ID ${id} no encontrado`);
            }

            return script;
        } catch (error) {
            this.logger.error(`Error al buscar script ${id}:`, error);
            throw error;
        }
    }

    async create(data: CreateScriptDto): Promise<Script> {
        try {
            return await this.prisma.script.create({
                data: {
                    name: data.name.trim(),
                    description: data.description?.trim() || '',
                    active: data.active ?? true,
                    triggers: JSON.stringify(data.triggers.map(t => t.trim())),
                    response: data.response.trim(),
                    category: data.category?.trim(),
                    requiresDate: data.requiresDate ?? false,
                    requiresRoomType: data.requiresRoomType ?? false,
                    requiresOccupancy: data.requiresOccupancy ?? false
                }
            });
        } catch (error) {
            this.logger.error('Error al crear script:', error);
            throw error;
        }
    }

    async update(id: number, data: UpdateScriptDto): Promise<Script> {
        try {
            // Verificar si el script existe
            await this.findById(id);

            const updateData: any = {};

            // Solo actualizar los campos que se proporcionan
            if (data.name !== undefined) updateData.name = data.name.trim();
            if (data.description !== undefined) updateData.description = data.description.trim();
            if (data.active !== undefined) updateData.active = data.active;
            if (data.triggers !== undefined) updateData.triggers = JSON.stringify(data.triggers.map(t => t.trim()));
            if (data.response !== undefined) updateData.response = data.response.trim();
            if (data.category !== undefined) updateData.category = data.category.trim();
            if (data.requiresDate !== undefined) updateData.requiresDate = data.requiresDate;
            if (data.requiresRoomType !== undefined) updateData.requiresRoomType = data.requiresRoomType;
            if (data.requiresOccupancy !== undefined) updateData.requiresOccupancy = data.requiresOccupancy;

            return await this.prisma.script.update({
                where: { id },
                data: updateData
            });
        } catch (error) {
            this.logger.error(`Error al actualizar script ${id}:`, error);
            throw error;
        }
    }

    async delete(id: number): Promise<Script> {
        try {
            // Verificar si el script existe
            await this.findById(id);

            return await this.prisma.script.delete({
                where: { id }
            });
        } catch (error) {
            this.logger.error(`Error al eliminar script ${id}:`, error);
            throw error;
        }
    }

    async findMatchingScript(input: string): Promise<Script | null> {
        const scripts = await this.prisma.script.findMany({
            where: {
                active: true
            }
        });

        let bestMatch: { script: Script; score: number } | null = null;
        const inputTokens = input.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '') // Eliminar acentos
            .split(/\s+/)
            .filter(token => token.length > 1); // Ignorar tokens muy cortos

        console.log('Tokens de entrada:', inputTokens);

        for (const script of scripts) {
            try {
                const triggers = JSON.parse(script.triggers);
                
                for (const trigger of triggers) {
                    const triggerTokens = trigger.toLowerCase()
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, '')
                        .split(/\s+/)
                        .filter(token => token.length > 1);

                    console.log(`Comparando con trigger "${trigger}":`, triggerTokens);

                    // Primero buscar coincidencia exacta
                    if (input.toLowerCase() === trigger.toLowerCase()) {
                        console.log('¬°Coincidencia exacta encontrada!');
                        return script;
                    }

                    // Luego buscar coincidencia parcial
                    let matchScore = 0;
                    let matchedTokens = 0;

                    // Calcular coincidencia de tokens
                    for (const inputToken of inputTokens) {
                        for (const triggerToken of triggerTokens) {
                            if (triggerToken.includes(inputToken) || inputToken.includes(triggerToken)) {
                                matchScore += (inputToken === triggerToken) ? 1 : 0.8;
                                matchedTokens++;
                                break;
                            }
                        }
                    }

                    // Normalizar score basado en la longitud del trigger y la entrada
                    const normalizedScore = matchScore / Math.max(triggerTokens.length, inputTokens.length);
                    console.log(`Score para "${trigger}":`, normalizedScore);

                    // Actualizar mejor coincidencia si es necesario
                    // Reducimos el umbral a 0.4 para ser m√°s permisivos
                    if (normalizedScore > 0.4 && (!bestMatch || normalizedScore > bestMatch.score)) {
                        console.log(`Nueva mejor coincidencia: "${script.name}" con score ${normalizedScore}`);
                        bestMatch = { script, score: normalizedScore };
                    }
                }
            } catch (error) {
                console.error(`Error parsing triggers for script ${script.id}:`, error);
                continue;
            }
        }

        if (bestMatch) {
            console.log(`Coincidencia final: "${bestMatch.script.name}" con score ${bestMatch.score}`);
        } else {
            console.log('No se encontr√≥ ninguna coincidencia');
        }

        return bestMatch ? bestMatch.script : null;
    }

    private readonly defaultScripts = [
        {
            name: 'Saludo Inicial',
            description: 'Respuesta al saludo inicial del usuario',
            active: true,
            triggers: JSON.stringify([
                'hola',
                'buenos dias',
                'buenas tardes',
                'buenas noches',
                'buen dia',
                'saludos'
            ]),
            response: `Hola, Buen dia! üòäüëã ¬°Te comunicaste con el Hotel Pe√±a Linda! ‚õ±üçπ 

Para informaci√≥n sobre estadia, por favor indicanos los siguientes datos ü•∞

* Fecha de check-in y check-out
* Cantidad de personas
* Si hay ni√±os incluir edades`,
            category: 'saludo',
            requiresDate: false,
            requiresRoomType: false,
            requiresOccupancy: false
        },
        {
            name: 'Consulta de Disponibilidad',
            description: 'Respuesta cuando el usuario consulta disponibilidad',
            active: true,
            triggers: JSON.stringify([
                'disponibilidad',
                'hay habitaciones',
                'tienen cuartos',
                'quiero reservar',
                'busco una habitacion',
                'necesito una habitacion'
            ]),
            response: `Para verificar la disponibilidad, necesito los siguientes datos:

üìÖ Fechas de estad√≠a:
- Check-in
- Check-out

üë• Hu√©spedes:
- N√∫mero de adultos
- N√∫mero y edad de ni√±os (si aplica)

üõèÔ∏è Preferencias:
- Tipo de habitaci√≥n (si tiene alguna preferencia)

Por favor, proporciona estos detalles para poder ayudarte mejor. üòä`,
            category: 'reservas',
            requiresDate: true,
            requiresRoomType: true,
            requiresOccupancy: true
        },
        {
            name: 'Ubicaci√≥n del Hotel',
            description: 'Informaci√≥n sobre la ubicaci√≥n del hotel',
            active: true,
            triggers: JSON.stringify([
                'donde estan',
                'donde est√°n',
                'donde esta',
                'd√≥nde est√°',
                'donde se encuentra',
                'd√≥nde se encuentra',
                'ubicacion',
                'ubicaci√≥n',
                'direccion',
                'direcci√≥n',
                'como llego',
                'c√≥mo llego',
                'donde queda',
                'd√≥nde queda'
            ]),
            response: `Nos encontramos en la Antigua Panamericana Norte Km. 1213, entre Las Pocitas y Vichayito en M√°ncora, Per√∫. Un lugar ideal para disfrutar de la playa y el sol. üìç Ubicaci√≥n en Google Maps: https://maps.app.goo.gl/3s9rG8DxYf4w3oW2A

¬øNecesitas indicaciones para llegar o m√°s informaci√≥n sobre nuestra ubicaci√≥n?`,
            category: 'ubicacion',
            requiresDate: false,
            requiresRoomType: false,
            requiresOccupancy: false
        }
    ];

    async initializeDefaultScripts() {
        try {
            console.log('Initializing default scripts...');
            
            for (const defaultScript of this.defaultScripts) {
                const existingScript = await this.prisma.script.findFirst({
                    where: {
                        name: defaultScript.name
                    }
                });

                if (!existingScript) {
                    console.log(`Creating default script: ${defaultScript.name}`);
                    await this.prisma.script.create({
                        data: defaultScript
                    });
                } else {
                    console.log(`Default script already exists: ${defaultScript.name}`);
                }
            }

            console.log('Default scripts initialization completed');
        } catch (error) {
            console.error('Error initializing default scripts:', error);
            throw new Error('Error al inicializar los scripts predeterminados');
        }
    }

    async createDefaultScripts(): Promise<void> {
        const defaultScripts = [
            {
                name: 'saludo_inicial',
                description: 'Saludo inicial sin contexto',
                active: true,
                triggers: [
                    'hola',
                    'buenos d√≠as',
                    'buenos dias',
                    'buen d√≠a',
                    'buen dia',
                    'buenas tardes',
                    'buenas noches',
                    'saludos',
                    'hi',
                    'hello'
                ],
                response: '¬°Hola! Soy el asistente virtual del Hotel. ¬øEn qu√© puedo ayudarte? Puedo brindarte informaci√≥n sobre:\n\n' +
                         'üè® Nuestras habitaciones y tarifas\n' +
                         'üìÖ Disponibilidad y reservas\n' +
                         '‚ú® Servicios y amenidades\n' +
                         'üéâ Ofertas especiales\n\n' +
                         '¬øQu√© informaci√≥n te gustar√≠a conocer?',
                category: 'general'
            },
            {
                name: 'consulta_informacion',
                description: 'Cliente solicita informaci√≥n general',
                active: true,
                triggers: [
                    'quisiera informaci√≥n',
                    'quisiera informacion',
                    'necesito informaci√≥n',
                    'necesito informacion',
                    'me pueden informar',
                    'informaci√≥n del hotel',
                    'informacion del hotel',
                    'quiero saber'
                ],
                response: 'Con gusto te ayudo. Nuestro hotel ofrece:\n\n' +
                         'üè® HABITACIONES:\n' +
                         '‚Ä¢ Simple: Ideal para viajeros individuales\n' +
                         '‚Ä¢ Doble: Perfecta para parejas\n' +
                         '‚Ä¢ Suite Junior: Espaciosa con sala de estar\n' +
                         '‚Ä¢ Suite Ejecutiva: Nuestra opci√≥n m√°s lujosa\n\n' +
                         'üí∞ TARIFAS:\n' +
                         '‚Ä¢ Temporada baja: Desde S/. 250 por noche\n' +
                         '‚Ä¢ Temporada alta: Desde S/. 350 por noche\n\n' +
                         '‚ú® SERVICIOS INCLUIDOS:\n' +
                         '‚Ä¢ Desayuno buffet\n' +
                         '‚Ä¢ WiFi de alta velocidad\n' +
                         '‚Ä¢ Acceso a piscina\n' +
                         '‚Ä¢ Gimnasio 24/7\n\n' +
                         '¬øSobre qu√© aspecto te gustar√≠a m√°s informaci√≥n?',
                category: 'general'
            },
            {
                name: 'consulta_disponibilidad',
                description: 'Consulta de disponibilidad de habitaciones',
                active: true,
                triggers: [
                    'habitaciones disponibles',
                    'hay cuartos',
                    'quiero reservar',
                    'hacer una reserva',
                    'disponibilidad',
                    'tienen habitaciones',
                    'busco alojamiento',
                    'necesito una habitaci√≥n',
                    'necesito una habitacion',
                    'quisiera reservar',
                    'hay disponibilidad'
                ],
                response: 'Para verificar la disponibilidad exacta, necesito algunos detalles:\n\n' +
                         'üìÖ ¬øPara qu√© fechas te gustar√≠a reservar?\n' +
                         'üë• ¬øCu√°ntas personas se hospedar√°n?\n' +
                         'üõè ¬øQu√© tipo de habitaci√≥n prefieres?\n\n' +
                         'Tipos de habitaci√≥n disponibles:\n' +
                         '‚Ä¢ Simple (1-2 personas)\n' +
                         '‚Ä¢ Doble (2-3 personas)\n' +
                         '‚Ä¢ Suite Junior (2-4 personas)\n' +
                         '‚Ä¢ Suite Ejecutiva (2-4 personas)\n\n' +
                         'Por favor, ind√≠came estos detalles para ayudarte mejor.',
                category: 'reservas',
                requiresDate: true,
                requiresOccupancy: true
            },
            {
                name: 'consulta_precios',
                description: 'Informaci√≥n detallada de precios',
                active: true,
                triggers: [
                    'precio',
                    'cuanto cuesta',
                    'tarifa',
                    'precios',
                    'costos',
                    'cuanto sale',
                    'valor de la habitaci√≥n',
                    'valor de la habitacion',
                    'tarifas',
                    'que precio tienen',
                    'informaci√≥n de precios',
                    'informacion de precios'
                ],
                response: 'üí∞ TARIFAS POR TIPO DE HABITACI√ìN:\n\n' +
                         'üè® Habitaci√≥n Simple:\n' +
                         '‚Ä¢ Temporada baja: S/. 250 por noche\n' +
                         '‚Ä¢ Temporada alta: S/. 350 por noche\n\n' +
                         'üè® Habitaci√≥n Doble:\n' +
                         '‚Ä¢ Temporada baja: S/. 350 por noche\n' +
                         '‚Ä¢ Temporada alta: S/. 450 por noche\n\n' +
                         'üè® Suite Junior:\n' +
                         '‚Ä¢ Temporada baja: S/. 450 por noche\n' +
                         '‚Ä¢ Temporada alta: S/. 550 por noche\n\n' +
                         'üè® Suite Ejecutiva:\n' +
                         '‚Ä¢ Temporada baja: S/. 550 por noche\n' +
                         '‚Ä¢ Temporada alta: S/. 650 por noche\n\n' +
                         '‚ú® Todos los precios incluyen:\n' +
                         '‚Ä¢ Desayuno buffet\n' +
                         '‚Ä¢ Acceso a instalaciones\n' +
                         '‚Ä¢ WiFi de alta velocidad\n' +
                         '‚Ä¢ Impuestos\n\n' +
                         'üéâ OFERTAS ESPECIALES:\n' +
                         '‚Ä¢ 15% descuento en estad√≠as de 3+ noches\n' +
                         '‚Ä¢ 25% descuento en reservas anticipadas\n\n' +
                         '¬øTe gustar√≠a conocer la disponibilidad para alguna de estas opciones?',
                category: 'reservas',
                requiresRoomType: true
            },
            {
                name: 'servicios_amenidades',
                description: 'Informaci√≥n sobre servicios del hotel',
                active: true,
                triggers: [
                    'servicios',
                    'que ofrecen',
                    'amenidades',
                    'facilidades',
                    'que incluye',
                    'beneficios',
                    'comodidades',
                    'instalaciones',
                    'que servicios tienen',
                    'que hay en el hotel'
                ],
                response: '‚ú® SERVICIOS E INSTALACIONES:\n\n' +
                         'üèä‚Äç‚ôÇÔ∏è √ÅREA DE PISCINA:\n' +
                         '‚Ä¢ Piscina infinity con vista al mar\n' +
                         '‚Ä¢ Tumbonas y sombrillas\n' +
                         '‚Ä¢ Bar en la piscina\n\n' +
                         'üçΩ RESTAURANTES Y BARES:\n' +
                         '‚Ä¢ Restaurante principal (buffet)\n' +
                         '‚Ä¢ Restaurante a la carta\n' +
                         '‚Ä¢ Bar en la terraza\n' +
                         '‚Ä¢ Servicio a la habitaci√≥n 24/7\n\n' +
                         'üèä‚Äç‚ôÄÔ∏è BIENESTAR:\n' +
                         '‚Ä¢ Spa completo\n' +
                         '‚Ä¢ Sala de masajes\n' +
                         '‚Ä¢ Gimnasio 24 horas\n' +
                         '‚Ä¢ Sauna y jacuzzi\n\n' +
                         'üéØ ENTRETENIMIENTO:\n' +
                         '‚Ä¢ Sala de juegos\n' +
                         '‚Ä¢ √Årea de lectura\n' +
                         '‚Ä¢ Actividades diarias\n\n' +
                         'üõé SERVICIOS ADICIONALES:\n' +
                         '‚Ä¢ Recepci√≥n 24 horas\n' +
                         '‚Ä¢ Concierge\n' +
                         '‚Ä¢ WiFi gratuito\n' +
                         '‚Ä¢ Estacionamiento\n' +
                         '‚Ä¢ Lavander√≠a\n\n' +
                         '¬øTe gustar√≠a m√°s detalles sobre alguno de estos servicios?',
                category: 'servicios'
            },
            {
                name: 'proceso_reserva',
                description: 'Informaci√≥n sobre el proceso de reserva',
                active: true,
                triggers: [
                    'como reservo',
                    'como hago la reserva',
                    'proceso de reserva',
                    'pasos para reservar',
                    'que necesito para reservar',
                    'requisitos de reserva',
                    'politica de reserva',
                    'pol√≠tica de reserva'
                ],
                response: 'üìã PROCESO DE RESERVA:\n\n' +
                         '1Ô∏è‚É£ CONSULTA Y SELECCI√ìN:\n' +
                         '‚Ä¢ Verifica disponibilidad para tus fechas\n' +
                         '‚Ä¢ Elige el tipo de habitaci√≥n\n\n' +
                         '2Ô∏è‚É£ DATOS NECESARIOS:\n' +
                         '‚Ä¢ Nombre completo\n' +
                         '‚Ä¢ DNI o Pasaporte\n' +
                         '‚Ä¢ Email\n' +
                         '‚Ä¢ Tel√©fono de contacto\n\n' +
                         '3Ô∏è‚É£ PAGO Y CONFIRMACI√ìN:\n' +
                         '‚Ä¢ 50% de adelanto para confirmar\n' +
                         '‚Ä¢ Saldo al hacer el check-in\n\n' +
                         '‚ö†Ô∏è POL√çTICAS IMPORTANTES:\n' +
                         '‚Ä¢ Check-in: 3:00 PM\n' +
                         '‚Ä¢ Check-out: 12:00 PM\n' +
                         '‚Ä¢ Cancelaci√≥n gratuita hasta 48h antes\n\n' +
                         '¬øTe gustar√≠a proceder con una reserva?',
                category: 'reservas'
            }
        ];

        for (const script of defaultScripts) {
            const exists = await this.prisma.script.findFirst({
                where: { name: script.name }
            });

            if (!exists) {
                await this.prisma.script.create({
                    data: {
                        ...script,
                        triggers: JSON.stringify(script.triggers)
                    }
                });
            }
        }
    }
}